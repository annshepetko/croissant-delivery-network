version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - kafka_net
    restart: unless-stopped
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    networks:
      - kafka_net
    restart: unless-stopped

  config-server:
    container_name: config-service
    environment:
      - POSTGRES_HOST=postgres
      - EUREKA_SERVER_URL=http://discovery:8761/eureka/
    build:
      context: ./config-server/
      dockerfile: Dockerfile
    networks:
      - microservice
      - postgres
      - kafka_net
    ports:
      - 8888:8888

  order:
    container_name: order-service
    environment:
      - POSTGRES_HOST=postgres
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_SERVER_URL=http://discovery:8761/eureka/
    depends_on:
      - postgres
      - kafka
      - config-server
      - discovery
    build:
      context: ./order/
      dockerfile: Dockerfile
    networks:
      - kafka_net
      - postgres
      - microservice
    ports:
      - 8060:8060

  discovery:
    container_name: eureka-service
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
    depends_on:
      - config-server
    build:
      context: ./discovery/
      dockerfile: Dockerfile
    networks:
      - microservice
    ports:
      - 8761:8761

  notification:
    build:
      context: ./notification/
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_SERVER_URL=http://discovery:8761/eureka/
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
    depends_on:
      - kafka
      - config-server
      - discovery
    networks:
      - kafka_net
      - microservice
    ports:
      - 8040:8040
  product:
    container_name: product-service
    environment:
      - POSTGRES_HOST=postgres
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_SERVER_URL=http://discovery:8761/eureka/
    build:
      context: ./product/
      dockerfile: Dockerfile
    ports:
      - 8050:8050
    depends_on:
      - postgres
      - config-server
      - discovery
    networks:
      - microservice
      - kafka_net
      - postgres
  user:
    container_name: user-service
    environment:
      - POSTGRES_HOST=postgres
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_SERVER_URL=http://discovery:8761/eureka/
    build:
      context: ./user/
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    depends_on:
      - postgres
      - kafka
      - config-server
      - discovery
    networks:
      - microservice
      - kafka_net
      - postgres
  gateway:
    container_name: api-gateway
    build:
      context: ./gateway/
      dockerfile: Dockerfile
    depends_on:
      - config-server
      - discovery
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_SERVER_URL=http://discovery:8761/eureka/
    networks:
      - microservice
      - kafka_net
    ports:
      - 9000:9000

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ann
      POSTGRES_PASSWORD: root
      PGDATA: /var/lib/postgresql/data
    volumes:
      - ./initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
      - postgres:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - postgres
    restart: unless-stopped

networks:
  microservice:
    driver: bridge
  postgres:
    driver: bridge
  kafka_net:
    driver: bridge

volumes:
  postgres:
